min(data$YRSCHOOL)
median(data$YRSCHOOL)
max(data$YRSCHOOL)
# minimum, median, and maximum of years of YRSCHOOL
min(data$YRSCHOOL)
median(data$YRSCHOOL)
max(data$YRSCHOOL)
# min, max, median of CHSURV
min(data$CHSURV)
median(data$CHSURV)
max(data$CHSURV)
# create dummy variables
data$less_hs = ifelse(data$YRSCHOOL < 12, 1, 0)
# create dummy variables
data$less_highschool = ifelse(data$YRSCHOOL < 11, 1, 0)
data$highschool = ifelse(data$YRSCHOOL == 12, 1, 0)
data$some_college = ifelse(data$YRSCHOOL > 12 & data$YRSCHOOL < 16, 1, 0)
data$bachelors = ifelse(data$YRSCHOOL == 16, 1, 0)
data$post_bachelor = ifelse(data$YRSCHOOL > 16, 1, 0)
# create regression
reg = lm(CHSURV ~ YRSCHOOL, data = data)
# view reg
summary(reg)
# create regression
regTwo = lm(CHSURV ~ less_highschool + some_college + bachelors + post_bachelor, data = data)
# summary
summary(regTwo)
# create regression
regTwo = lm(CHSURV ~ less_highschool + some_college + bachelors + post_bachelor, data = data)
# summary
summary(regTwo)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
# load the wooldrige library
library(wooldridge)
# load the data in bwght
data("bwght")
### get the number of observations
nrow(bwght)
# get the number of people smoking during pregnancy
sum(bwght$cigs >= 1)
# average number of cigs per day
mean(bwght$cigs)
sum(bwght$cigs == 0)
# create the regression
reg = lm(faminc ~ fatheduc, data = bwght)
# report regression information
summary(reg)
# get n of regression (remove number deleted)
nrow(bwght) - 196
# load the data in hprice1
data("hprice1")
??hprice1
# estimate price vs sqrt and bdrms
reg = lm(price ~ sqrft + bdrms, data = hprice1)
summary(reg)
# only need to install once
# install.packages('ipumsr')
# load library
library(ipumsr)
if (!require("ipumsr")) stop("Reading IPUMS data into R requires the ipumsr package. It can be installed using the following command: install.packages('ipumsr')")
ddi = read_ipums_ddi("ipumsi_00001.xml")
data = read_ipums_micro(ddi)
# check data values
head(data)
# minimum, median, and maximum of years of YRSCHOOL
min(data$YRSCHOOL)
median(data$YRSCHOOL)
max(data$YRSCHOOL)
# min, max, median of CHSURV
min(data$CHSURV)
median(data$CHSURV)
max(data$CHSURV)
# create dummy variables
data$less_highschool = ifelse(data$YRSCHOOL < 11, 1, 0)
data$highschool = ifelse(data$YRSCHOOL == 12, 1, 0)
data$some_college = ifelse(data$YRSCHOOL > 12 & data$YRSCHOOL < 16, 1, 0)
data$bachelors = ifelse(data$YRSCHOOL == 16, 1, 0)
data$post_bachelor = ifelse(data$YRSCHOOL > 16, 1, 0)
# create regression
reg = lm(CHSURV ~ YRSCHOOL, data = data)
# view reg
summary(reg)
# create regression
regTwo = lm(CHSURV ~ less_highschool + some_college + bachelors + post_bachelor, data = data)
# summary
summary(regTwo)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
# load the wooldrige library
library(wooldridge)
# load the data in bwght
data("bwght")
### get the number of observations
nrow(bwght)
# get the number of people smoking during pregnancy
sum(bwght$cigs >= 1)
View(bwght)
View(bwght)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
# get WAGE2 data from Wooldridge
library(wooldridge)
data("wage2")
# get WAGE2 data from Wooldridge
library(wooldridge)
wage_two = data("wage2")
wage_two
# get WAGE2 data from Wooldridge
library(wooldridge)
wage_two = data("wage2")
wage_two.head()
# get WAGE2 data from Wooldridge
library(wooldridge)
wage_two = data("wage2")
?wage_two
# get WAGE2 data from Wooldridge
library(wooldridge)
wage_two = data("wage2")
??wage_two
# get WAGE2 data from Wooldridge
library(wooldridge)
wage_two = data("WAGE2")
??wage_two
# get WAGE2 data from Wooldridge
library(wooldridge)
data("WAGE2")
wage_two = wage2
wage_two
boxplot(wage_two$wage ~ wage_two$tenure)
boxplot(wage ~ tenure, data = wage_two,
xlab = "Wage (monthly earnings)",
ylab = "Tenure (years with current employer)",
main = "Boxplot of years with current employer vs monthly wage",
col = c("lightblue", "lightgreen"))
boxplot(tenure ~ wage, data = wage_two,
xlab = "Wage (monthly earnings)",
ylab = "Tenure (years with current employer)",
main = "Boxplot of years with current employer vs monthly wage",
col = c("lightblue", "lightgreen"))
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
# get WAGE2 data from Wooldridge
library(wooldridge)
data("WAGE2")
wage_two = wage2
wage_two
boxplot(tenure ~ wage, data = wage_two,
xlab = "Wage (monthly earnings)",
ylab = "Tenure (years with current employer)",
main = "Boxplot of years with current employer vs monthly wage",
col = c("lightblue", "lightgreen"))
# build a confidence interval
combined_years = wage_two$exper + wage_two$tenure
reg = lm(log(wage) ~ educ + combined_years, data = wage_two)
# get beta2
beta2 = reg$coefficients[3]
# get standard error
se = summary(reg)$coefficients[3, 2]
# get critical value
c = qt(0.95, df = nrow(wage_two) - 3)
# confidence interval
ci = c(beta2 - c * se, beta2 + c * se)
ci
# joint significance test
wald = (beta2^2) / (se^2)
wald
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
# get WAGE2 data from Wooldridge
library(wooldridge)
data("WAGE2")
wage_two = wage2
wage_two
boxplot(tenure ~ wage, data = wage_two,
xlab = "Wage (monthly earnings)",
ylab = "Tenure (years with current employer)",
main = "Boxplot of years with current employer vs monthly wage",
col = c("lightblue", "lightgreen"))
# build a confidence interval
combined_years = wage_two$exper + wage_two$tenure
reg = lm(log(wage) ~ educ + combined_years, data = wage_two)
confint(reg, level = 0.95)
# build a confidence interval
combined_years = wage_two$exper + wage_two$tenure
reg = lm(log(wage) ~ educ + combined_years, data = wage_two)
# get experience and tenure
exper_est = reg$coefficients[3]
tenure_est = reg$coefficients[4]
diff_est = exper_est - tenure_est
# get standard error
se = summary(reg)$coefficients[3, 2]
# get critical value
c = qt(0.95, df = nrow(wage_two) - 3)
# confidence interval
ci = c(diff_est - c * se, diff_est + c * se)
ci
# build a confidence interval
combined_years = wage_two$exper + wage_two$tenure
reg = lm(log(wage) ~ educ + combined_years, data = wage_two)
# get experience and tenure
exper_est = reg$coefficients[3]
tenure_est = reg$coefficients[4]
diff_est = exper_est - tenure_est
# get standard error
se = summary(reg)$coefficients[3, 2]
# get critical value
c = qt(0.95, df = nrow(wage_two) - 3)
# confidence interval
ci = list(diff_est - c * se, diff_est + c * se)
ci
combined_years = wage_two$exper + wage_two$tenure
combined_years
combined_years = wage_two$exper + wage_two$tenure
reg = lm(log(wage) ~ educ + combined_years, data = wage_two)
diff_est
summary(reg)
diff_est = exper_est - tenure_est
# get standard error
se = summary(reg)$coefficients[3, 2]
# get critical value
c = qt(0.95, df = nrow(wage_two) - 3)
# confidence interval
ci = list(diff_est - c * se, diff_est + c * se)
ci
# build a confidence interval
reg = lm(log(wage) ~ educ + exper + tenure, data = wage_two)
# get experience and tenure
exper_est = reg$coefficients[3]
tenure_est = reg$coefficients[4]
diff_est = exper_est - tenure_est
# get standard error
se = summary(reg)$coefficients[3, 2]
# get critical value
c = qt(0.95, df = nrow(wage_two) - 3)
# confidence interval
ci = list(diff_est - c * se, diff_est + c * se)
ci
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
# library for F test
library(car)
# get WAGE2 data from Wooldridge
library(wooldridge)
data("WAGE2")
wage_two = wage2
wage_two
# unrestricted model
unrestricted_reg = lm(log(wage) ~ educ + exper + tenure, data = wage_two)
# null hypothesis variable
null_hyp = c("exper", "tenure")
# test null
linearHypothesis(unrestricted_reg, null_hyp)
# estimate the model
reg = lm(log(wage) ~ educ + exper + tenure, data = wage_two)
# get residuals
residuals = resid(reg)
# plot histogram
hist(residuals, main = "Histogram of residuals", xlab = "Residuals", col = "lightblue")
# estimate the model
reg = lm(wage ~ educ + exper + tenure, data = wage_two)
# get residuals
residuals = resid(reg)
# plot histogram
hist(residuals, main = "Histogram of residuals", xlab = "Residuals", col = "lightblue")
# estimate the model
reg = lm(log(wage) ~ educ + exper + tenure, data = wage_two)
# get residuals
residuals = resid(reg)
# plot histogram
hist(residuals, main = "Histogram of residuals", xlab = "Residuals", col = "lightblue")
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
# library for F test
library(car)
# get WAGE2 data from Wooldridge
library(wooldridge)
data("WAGE2")
wage_two = wage2
wage_two
boxplot(tenure ~ wage, data = wage_two,
xlab = "Wage (monthly earnings)",
ylab = "Tenure (years with current employer)",
main = "Boxplot of years with current employer vs monthly wage",
col = c("lightblue", "lightgreen"))
# build a confidence interval
reg = lm(log(wage) ~ educ + exper + tenure, data = wage_two)
# get experience and tenure
exper_est = reg$coefficients[3]
tenure_est = reg$coefficients[4]
diff_est = exper_est - tenure_est
# get standard error
se = summary(reg)$coefficients[3, 2]
# get critical value
c = qt(0.95, df = nrow(wage_two) - 3)
# confidence interval
ci = list(diff_est - c * se, diff_est + c * se)
ci
# unrestricted model
unrestricted_reg = lm(log(wage) ~ educ + exper + tenure, data = wage_two)
# null hypothesis variable
null_hyp = c("exper", "tenure")
# test null
linearHypothesis(unrestricted_reg, null_hyp)
# estimate the model
reg = lm(wage ~ educ + exper + tenure, data = wage_two)
# get residuals
residuals = resid(reg)
# plot histogram
hist(residuals, main = "Histogram of residuals", xlab = "Residuals", col = "lightblue")
# estimate the model
reg = lm(log(wage) ~ educ + exper + tenure, data = wage_two)
# get residuals
residuals = resid(reg)
# plot histogram
hist(residuals, main = "Histogram of residuals", xlab = "Residuals", col = "lightblue")
# library for F test
library(car)
# get WAGE2 data from Wooldridge
library(wooldridge)
data("WAGE2")
wage_two = wage2
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
# load the wooldrige library
library(wooldridge)
# load the data in bwght
data("BWGHT2")
?BWGHT2
??BWGHT2
# load the data in bwght
data = data("BWGHT2")
data$mage
data
data = BWGHT2
bwght2
??bwght2
# load the data in apple
data("apple")
data_two = apple
data_two
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
# load the wooldrige library
library(wooldridge)
# load the data in bwght
data("bwght2")
??bwght2
??bwght2
bwght2
# create the regression
reg = lm(log(bwght) ~ npvis + npvis^2, data = bwght2)
# summary of the regression
summary(reg)
# create the regression
reg = lm(log(bwght) ~ npvis + I(npvis^2), data = bwght2)
# summary of the regression
summary(reg)
# find the maximum value of the log(bwght)
beta_one = coef(reg)[2]
beta_two = coef(reg)[3]
max_visits = -beta_one/(2*beta_two)
max_visits
# find the number of npvis that are greater than the max_visits
sum(bwght2$npvis >= max_visits)
# find the maximum value of the log(bwght)
beta_one = coef(reg)[2]
beta_two = coef(reg)[3]
max_visits = -beta_one/(2*beta_two)
max_visits
# find the number of npvis that are greater than the max_visits
sum(bwght2$npvis >= max_visits)
# find the number of npvis that are greater than the max_visits
sum(bwght2$npvis >= max_visits, na.rm = TRUE)
# load the data in apple
data("apple")
data_two = apple
data_two
# create the ecobuy binary variable
data_two$ecobuy = ifelse(data_two$ecolbs > 0, 1, 0)
# find the fraction of families that would buy ecolabeled apples
sum(data_two$ecobuy == 1, na.rm = TRUE)/nrow(data_two)
# create the regression
reg = lm(ecobuy ~ ecoprc + regprc + faminc + hhsize + educ + age, data = data_two)
# summary
summary(reg)
# use the car library
library(car)
# null hypothesis
myh0 = c("faminc = 0", "hhsize = 0", "educ = 0", "age = 0")
# test the null hypothesis
linearHypothesis(reg, myh0)
# load the wooldrige library
library(wooldridge)
# load the data in bwght
data("bwght2")
??bwght2
View(bwght)
??bwght
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
# load the wooldrige library
library(wooldridge)
# load the data in pntsprd
data("pntsprd")
??pntsprd
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
# regress sprdcvr
model = lm(pntsprd$sprdcvr ~ 1)
summary(model)
# get the information
est_mu = coef(model)[1]
se_mu = summary(model)$coefficients[1, 2]
# perform t test
t_stat = (estimated_mean - 0.5) / standard_error
t_stat
# regress sprdcvr
model = lm(pntsprd$sprdcvr ~ 1)
summary(model)
# get the information
est_mu = coef(model)[1]
se_mu = summary(model)$coefficients[1, 2]
# perform t test
t_stat = (estimated_mean - 0.5) / standard_error
# perform t test
t_stat = (est_mu - 0.5) / se_mu
t_stat
# load the wooldrige library
library(wooldridge)
# load the data in pntsprd
data("pntsprd")
# regress sprdcvr
model = lm(pntsprd$sprdcvr ~ 1)
summary(model)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
# first time install
# install.packages("languageserver")
# install.packages("wooldridge")
# install.packages("car")
# install.packages("lmtest")
# install.packages("vtable")
# load the wooldrige library
library(wooldridge)
library(car)
library(lmtest)
# load the data in pntsprd
data("pntsprd")
# regress sprdcvr
model = lm(pntsprd$sprdcvr ~ 1)
summary(model)
# get the information
est_mu = coef(model)[1]
se_mu = summary(model)$coefficients[1, 2]
# perform t test
t_stat = (est_mu - 0.5) / se_mu
t_stat
# regress sprdcvr
model = lm(pntsprd$sprdcvr ~ 1)
summary(model)
# get the information
est_mu = coef(model)[1]
se_mu = summary(model)$coefficients[1, 2]
# perform t test
t_stat = (est_mu - 0.5) / se_mu
t_stat
### a. The variable sprdcvr is a binary variable equal to one if the Las Vegas point spread for a college basketball game was covered. The expected value of sprdcvr, say µ, is the probability that the spread is covered in a randomly selected game. Test H0 : mu = .5 against H1 : mu = .5 at the 10% significance level and discuss your findings. (Hint: This is easily done using a t test by regressing sprdcvr on an intercept only.)
```{r}
### b. How many games in the sample of 553 were played on a neutral court?
```{r}
### c. Estimate the linear probability model
```{r}
## 2. Use the data in KIELMC for this exercise. Reference the functions I uploaded for this assignment for an example.
```{r}
### a. Provide a table with summary statistics for this data set. Use sumtable function. If your code does not output, comment out the code. This should still work when you knit to an html file.
```{r, results='asis'}
# number played on a neutral court
sum(pntsprd$neutral == 1)
35 / 553 * 100
# linear probability model
model = lm(sprdcvr ~ favhome + neutral + fav25 + und25, data = pntsprd)
summary(model)
coeftest(model, vcov=hccm(model, type="hc0"))
# load the data in kielmc
data("kielmc")
# load libraries
library(vtable)
library(ggplot2)
# summary statistics
sumtable(kielmc)
# create scatteplot
ggplot(data = kielmc, aes(x = log(dist), y = log(price), color = factor(year))) +
geom_point()
# summary statistics
sumtable(kielmc)
knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
# install libraries
install.packages(c("htmltools", "shiny", "DT"))
install.packages(c("htmltools", "shiny", "DT"))
# look at data
ipums_view(data)
# load ipums lib
library(ipumsr)
# look at data
ipums_view(data)
# get data
ddi = read_ipums_ddi("ipumsi_00002.xml")
# get data
ddi = read_ipums_ddi("ipumsi_00002.xml")
data = read_ipums_micro(ddi)
setwd("//wsl.localhost/Ubuntu/home/js/Metrics/project")
# look at data
ipums_view(data)
# install libraries
# install.packages(c("htmltools", "shiny", "DT"))
# load ipums lib
library(ipumsr)
# get data
ddi = read_ipums_ddi("ipumsi_00002.xml")
data = read_ipums_micro(ddi)
data = read_ipums_micro(ddi)
# look at data
ipums_view(data)
